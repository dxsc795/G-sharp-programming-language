Keywords Control Structures

kalt - input
vokar - print
omit - Conditional statement
elv - Else clause
el - Elif statement
lift - Switch statement
cycle - While loop
walk - For loop
Functions

dox - Function definition
Lamb - Lambda function
outer - Nonlocal function
universal - Global function


Class Definition
- `forma` - Defines a new class
- `molde` - Defines a new struct

Constructors and Destructors
- `crea` - Constructor, initializes a new object
- `dest` - Destructor, cleans up when an object is destroyed

Access Modifiers
- `libre` - Public access, members are accessible from anywhere
- `privy` - Private access, members are accessible only within the class
- `comun` - Protected access, members are accessible within the class and its derived classes

Inheritance
- `hereda` - Specifies the parent class from which to inherit

Polymorphism
- `morf` - Method overriding, allows a subclass to provide a different implementation of a method

Operator Overloading
- `opera` - Operator overloading, allows custom classes to redefine operators

Memory Management
- `nuevo` - Dynamic memory allocation, creates a new object on the heap
- `borra` - Dynamic memory deallocation, destroys an object on the heap

Other
- `esto` - Self-reference, refers to the current object
- `fijo` - Static, specifies a method or variable that belongs to the class itself, rather than an instance of the class.


attempt - Try block
catch - Catch block
ensure - Finally block
throw - Raise statement
verify - Assert statement
Modules and Packages

load - Import statement
exload - Export statement
loadfrom - From statement
loas - As statement
packet - Package statement
Other

remove - Delete statement
execute - Execute statement
eval - Evaluate statement
using - With statement
async - Asynchronous statement
waitfor - Await statement
Data Types

int - Integer
float - Float
str - String
bool - Boolean
list - List
tuple - Tuple
mapa - Dictionary
void - Null
unin - Undefined
graph - Graph data structure
tree - Tree data structure
heap - Heap data structure
set - Set data structure
matrix - Matrix data structure
vector - Vector data structure

In G##, !! and % are both modulus operators, but they behave slightly differently:

!! is the integer modulus operator. It returns the remainder of the division of the dividend by the divisor, where both dividend and divisor are integers.

% is the floating-point modulus operator. It returns the remainder of the division of the dividend by the divisor, where either dividend or divisor is a floating-point number.

Here's an example:

x = 17 !! 5

x = 2

y = 17 % 5

y = 2.0

In this example, both !! and % return the same result, but the data type of the result is different. The result of !! is an integer, while the result of % is a floating-point number.

In G##, the ** operator is used for exponentiation. It raises the first operand to the power of the second operand.

Here's an example:

x = 2 ** 3

x = 8

Vokar(x)

In mathematics 2 ** 3 = 2 × 2 × 2 = 8

In this example, the ** operator raises 2 to the power of 3, resulting in 8.

